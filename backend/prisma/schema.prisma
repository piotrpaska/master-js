// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

enum RecordStatus {
  OK
  DNF
  DNS
  DSQ
}

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Record {
  id String @id @default(cuid())
  startTime BigInt @default(0)
  endTime BigInt?
  duration BigInt?
  track String
  entryId String
  trackId String
  sessionId String
  status RecordStatus @default(OK)
  timestamp DateTime @default(now())

  session Session @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  entry Entry @relation(fields: [entryId], references: [id], onDelete: Cascade)
}

model StartList {
  id String @id @default(cuid())
  title String

  entries Entry[]

  sessions Session[]
}

model Entry {
  id String @id @default(cuid())
  athleteId String
  athlete Athlete @relation(fields: [athleteId], references: [id])
  startListId String
  startList StartList @relation(fields: [startListId], references: [id], onDelete: Cascade)
  bib String
  alreadyStarted Boolean @default(false)

  records Record[]
}

model Session {
  id String @id @default(cuid())
  title String
  startListId String
  startList StartList @relation(fields: [startListId], references: [id], onDelete: Cascade)

  records Record[]
}

model Athlete {
  id String @id @default(cuid())
  name String

  entries Entry[]
}